{"version":3,"file":"static/js/776.e1caff51.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__6+X5C\"};","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote = (props) => {\r\n  return (\r\n    <figure className={classes.quote}>\r\n      <p>{props.text}</p>\r\n      <figcaption>{props.author}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default HighlightedQuote;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__up9lU\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__pyqEj\",\"loading\":\"NewCommentForm_loading__YlgK7\",\"control\":\"NewCommentForm_control__TdZBW\",\"actions\":\"NewCommentForm_actions__4+G3U\"};","import { useRef, useEffect } from 'react';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { addComment } from '../../lib/api';\r\nimport LoadingSpinner from '../ui/LoadingSpinner';\r\n\r\nimport classes from './NewCommentForm.module.css';\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n  const { onAddedComment } = props;\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed' && !error) {\r\n      onAddedComment();\r\n    }\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredText = commentTextRef.current.value;\r\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === 'pending' && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor=\"comment\">Your Comment</label>\r\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className=\"btn\">Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__R96JU\"};","import classes from './CommentItem.module.css';\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CommentItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__eM9b1\"};","import CommentItem from './CommentItem';\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul className={classes.comments}>\r\n      {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getAllComments } from '../../lib/api';\r\nimport LoadingSpinner from '../ui/LoadingSpinner';\r\n\r\nimport classes from './Comments.module.css';\r\nimport NewCommentForm from './NewCommentForm';\r\nimport CommentsList from './CommentsList';\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const params = useParams();\r\n  const quoteId = params.quoteId;\r\n  console.log(params);\r\n\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n\r\n  let comments;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  function startAddCommentHandler() {\r\n    setIsAddingComment(true);\r\n  }\r\n\r\n  const addedComment = useCallback(() => {\r\n    sendRequest(quoteId);\r\n    setIsAddingComment(false);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    comments = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === 'completed' && (loadedComments || loadedComments.length > 0)) {\r\n    comments = <CommentsList comments={loadedComments} />;\r\n  }\r\n\r\n  if (\r\n    status === 'completed' &&\r\n    (!loadedComments || loadedComments.length === 0)\r\n  ) {\r\n    comments = <p className=\"centered\">No comments have been added!</p>;\r\n  }\r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className=\"btn\" onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && (\r\n        <NewCommentForm quoteId={quoteId} onAddedComment={addedComment} />\r\n      )}\r\n      {comments}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/ui/LoadingSpinner';\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","className","classes","text","author","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","console","log","getAllComments","loadedComments","data","addedComment","useCallback","length","onClick","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}