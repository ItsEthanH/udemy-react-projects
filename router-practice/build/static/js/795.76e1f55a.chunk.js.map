{"version":3,"file":"static/js/795.76e1f55a.chunk.js","mappings":"qNACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,Y,SCF9C,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCkEnI,EA5DkB,SAACH,GACjB,OAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAkBrB,OACE,iCACE,SAAC,KAAD,CACEE,KAAML,EACNM,QAAS,iBACP,0EAGJ,SAAC,EAAD,WACE,kBACEC,QAlBR,WACEN,GAAa,IAkBPL,UAAWC,EACXW,SA5BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBT,EAAeU,QAAQC,MACvCC,EAAcV,EAAaQ,QAAQC,MACzClB,EAAMoB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAoB5C,UAKGnB,EAAMuB,YACL,gBAAKtB,UAAWC,EAAhB,UACE,SAACsB,EAAA,EAAD,OAIJ,iBAAKvB,UAAWC,EAAhB,WACE,kBAAOuB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKrB,QAEtC,iBAAKN,UAAWC,EAAhB,WACE,kBAAOuB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKnB,QAEpC,gBAAKR,UAAWC,EAAhB,UACE,mBAAQ4B,QAjClB,WACExB,GAAa,IAgC6BL,UAAU,MAA5C,kC,SC/BZ,MAnBA,WACE,OAAgC8B,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAUC,EAAAA,EAAAA,MAYhB,OAVAC,EAAAA,EAAAA,YAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAEd,CAACJ,EAAQC,KAOV,SAAC,EAAD,CAAWZ,UAAsB,YAAXW,EAAsBd,WAL9C,SAAyBmB,GACvBN,EAAYM","sources":["webpack://react-complete-guide/./src/components/ui/Card.module.css?49cd","components/ui/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__LzvAg\"};","import classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__T4VX0\",\"loading\":\"QuoteForm_loading__axuZF\",\"control\":\"QuoteForm_control__2Tyi3\",\"actions\":\"QuoteForm_actions__E5WGv\"};","import { useRef, useState } from 'react';\r\nimport { Prompt } from 'react-router-dom';\r\n\r\nimport Card from '../ui/Card';\r\nimport LoadingSpinner from '../ui/LoadingSpinner';\r\nimport classes from './QuoteForm.module.css';\r\n\r\nconst QuoteForm = (props) => {\r\n  const [formFocus, setFormFocus] = useState(false);\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  function formFocusHandler() {\r\n    setFormFocus(true);\r\n  }\r\n\r\n  function finshedEntering() {\r\n    setFormFocus(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Prompt\r\n        when={formFocus}\r\n        message={() =>\r\n          'Are you sure you want to leave? All your entered data will be lost!'\r\n        }\r\n      />\r\n      <Card>\r\n        <form\r\n          onFocus={formFocusHandler}\r\n          className={classes.form}\r\n          onSubmit={submitFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={finshedEntering} className=\"btn\">\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useHttp from '../hooks/use-http';\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport { addQuote } from '../lib/api';\r\n\r\nfunction NewQuote() {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed') {\r\n      history.push('/quotes');\r\n    }\r\n  }, [status, history]);\r\n\r\n  function addQuoteHandler(quoteData) {\r\n    sendRequest(quoteData);\r\n  }\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n  );\r\n}\r\n\r\nexport default NewQuote;\r\n"],"names":["props","className","classes","children","useState","formFocus","setFormFocus","authorInputRef","useRef","textInputRef","when","message","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","onClick","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"sourceRoot":""}